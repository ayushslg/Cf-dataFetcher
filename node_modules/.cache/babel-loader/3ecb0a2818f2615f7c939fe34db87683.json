{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Ayush\\\\Desktop\\\\codeforces-visualiser\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ayush\\\\Desktop\\\\codeforces-visualiser\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\Ayush\\\\Desktop\\\\codeforces-visualiser\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Ayush\\\\Desktop\\\\codeforces-visualiser\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from\"react\";var Contest=/*#__PURE__*/function(_React$Component){_inherits(Contest,_React$Component);var _super=_createSuper(Contest);function Contest(){_classCallCheck(this,Contest);return _super.apply(this,arguments);}_createClass(Contest,[{key:\"render\",value:function render(){var best=1e10;var worst=-1e10;var maxUp=0;var maxDown=0;var con_url='https://codeforces.com/contest/';this.props.user_data.forEach(function(con){if(con.rank<best){best=con.rank;}if(con.rank>worst){worst=con.rank;}var ch=con.newRating-con.oldRating;if(ch>maxUp){maxUp=ch;}if(ch<maxDown){maxDown=ch;}});var problems={};for(var i=this.props.data.length-1;i>=0;i--){var sub=this.props.data[i];var problemId=sub.problem.contestId+'-'+sub.problem.index;if(problems[problemId]===undefined){problems[problemId]={attempts:1,solved:0};}else{if(problems[problemId].solved===0)problems[problemId].attempts++;}if(sub.verdict==='OK'){problems[problemId].solved++;}}var maxAttempt=0;var maxAc='';var unsolved=[];for(var p in problems){if(problems[p].solved===0)unsolved.push(p);if(problems[p].attempts>maxAttempt){maxAttempt=problems[p].attempts;}if(problems[p].solved>maxAc){maxAc=problems[p].solved;}}var unsolvedList=unsolved.map(function(p){if(p!==undefined){return/*#__PURE__*/React.createElement(\"div\",{className:\"col s3 m2 l2\"},/*#__PURE__*/React.createElement(\"a\",{href:con_url+p.split('-')[0]+'/problem/'+p.split('-')[1],style:{display:\"inline-block\"}},p));}});return/*#__PURE__*/React.createElement(\"div\",null,unsolved.length>0&&/*#__PURE__*/React.createElement(\"div\",{className:\"row z-depth-2\",style:{padding:20}},/*#__PURE__*/React.createElement(\"span\",{style:{color:\"blanchedalmond\",fontWeight:500,fontSize:\"18px\",marginLeft:\"50\"}},\"Unsolved\"),/*#__PURE__*/React.createElement(\"div\",null,unsolvedList)));}}]);return Contest;}(React.Component);export default Contest;","map":{"version":3,"sources":["C:/Users/Ayush/Desktop/codeforces-visualiser/src/Components/contest.js"],"names":["React","Contest","best","worst","maxUp","maxDown","con_url","props","user_data","forEach","con","rank","ch","newRating","oldRating","problems","i","data","length","sub","problemId","problem","contestId","index","undefined","attempts","solved","verdict","maxAttempt","maxAc","unsolved","p","push","unsolvedList","map","split","display","padding","color","fontWeight","fontSize","marginLeft","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nclass Contest extends React.Component{\n\n    render() {\n            var best = 1e10;\n            var worst = -1e10;\n            var maxUp = 0;\n            var maxDown = 0;\n            var con_url = 'https://codeforces.com/contest/';\n            this.props.user_data.forEach(function(con) {\n            if (con.rank < best) {\n              best = con.rank;\n            }\n            if (con.rank > worst) {\n              worst = con.rank;\n            }\n            var ch = con.newRating - con.oldRating;\n            if (ch > maxUp) {\n              maxUp = ch;\n            }\n            if (ch < maxDown) {\n              maxDown = ch;\n            }\n            });\n            var problems = {};\n            for (var i = this.props.data.length - 1; i >= 0; i--) {\n                var sub = this.props.data[i];\n                var problemId = sub.problem.contestId + '-' + sub.problem.index;\n                if (problems[problemId] === undefined) {\n                    problems[problemId] = {\n                        attempts: 1,\n                        solved: 0\n                    };\n                } else {\n                    if (problems[problemId].solved === 0) problems[problemId].attempts++;\n                }\n\n                if (sub.verdict === 'OK') {\n                    problems[problemId].solved++;\n                }\n            }\n                var maxAttempt = 0;\n                var maxAc = '';\n                var unsolved = [];\n                for (var p in problems) {\n                    if (problems[p].solved === 0) unsolved.push(p);\n\n                    if (problems[p].attempts > maxAttempt) {\n                        maxAttempt = problems[p].attempts;\n                    }\n                    if (problems[p].solved > maxAc) {\n                        maxAc = problems[p].solved;\n                    }\n                }\n                const unsolvedList =unsolved.map(p=>{\n                    if(p!==undefined) {\n                        return (\n                            <div className=\"col s3 m2 l2\"><a href={con_url+p.split('-')[0]+'/problem/'+p.split('-')[1]}  style={{display:\"inline-block\"}}>\n                                {p}\n                            </a>\n                            </div>\n                        )\n                    }\n                })\n        return(\n            <div >\n                {unsolved.length>0&&\n                <div className=\"row z-depth-2\" style={{padding:20}}>\n                    <span style={{ color: \"blanchedalmond\",fontWeight: 500,fontSize: \"18px\",marginLeft:\"50\"}}>Unsolved</span>\n                    <div >{unsolvedList}</div>\n                </div>\n                }\n            </div>\n        )\n    }\n\n}\nexport default Contest"]},"metadata":{},"sourceType":"module"}