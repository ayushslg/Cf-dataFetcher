{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ayush\\\\Desktop\\\\Codeforces\\\\codeforces-visulizer-master\\\\src\\\\Components\\\\contest.js\";\nimport React from \"react\";\n\nclass Contest extends React.Component {\n  render() {\n    //contest\n    var best = 1e10;\n    var worst = -1e10;\n    var maxUp = 0;\n    var maxDown = 0;\n    var bestCon = '';\n    var worstCon = '';\n    var maxUpCon = '';\n    var maxDownCon = '';\n    var tot = this.props.user_data.length;\n    var con_url = 'https://codeforces.com/contest/';\n    this.props.user_data.forEach(function (con) {\n      // con is a contest\n      if (con.rank < best) {\n        best = con.rank;\n        bestCon = con.contestId;\n      }\n\n      if (con.rank > worst) {\n        worst = con.rank;\n        worstCon = con.contestId;\n      }\n\n      var ch = con.newRating - con.oldRating;\n\n      if (ch > maxUp) {\n        maxUp = ch;\n        maxUpCon = con.contestId;\n      }\n\n      if (ch < maxDown) {\n        maxDown = ch;\n        maxDownCon = con.contestId;\n      }\n    }); // console.log(maxDownCon)\n    //problems\n\n    var problems = {};\n\n    for (var i = this.props.data.length - 1; i >= 0; i--) {\n      var sub = this.props.data[i];\n      var problemId = sub.problem.contestId + '-' + sub.problem.index;\n\n      if (problems[problemId] === undefined) {\n        // first submission of a problem\n        problems[problemId] = {\n          attempts: 1,\n          solved: 0 // We also want to save how many submission got AC, a better name would have been number_of_ac\n\n        };\n      } else {\n        //we want to show how many time a problem was attempted by a user before getting first AC\n        if (problems[problemId].solved === 0) problems[problemId].attempts++;\n      }\n\n      if (sub.verdict === 'OK') {\n        problems[problemId].solved++;\n      }\n    }\n\n    var tried = 0;\n    var solved = 0;\n    var maxAttempt = 0;\n    var maxAttemptProblem = '';\n    var maxAc = '';\n    var maxAcProblem = '';\n    var unsolved = [];\n    var solvedWithOneSub = 0;\n\n    for (var p in problems) {\n      tried++;\n      if (problems[p].solved > 0) solved++;\n      if (problems[p].solved === 0) unsolved.push(p);\n\n      if (problems[p].attempts > maxAttempt) {\n        maxAttempt = problems[p].attempts;\n        maxAttemptProblem = p;\n      }\n\n      if (problems[p].solved > maxAc) {\n        maxAc = problems[p].solved;\n        maxAcProblem = p;\n      }\n\n      if (problems[p].solved === problems[p].attempts) solvedWithOneSub++;\n    }\n\n    const unsolvedList = unsolved.map(p => {\n      if (p !== undefined) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col s3 m2 l2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          href: con_url + p.split('-')[0] + '/problem/' + p.split('-')[1],\n          target: \"_blank\",\n          style: {\n            display: \"inline-block\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 59\n          }\n        }, p));\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, unsolved.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row z-depth-2\",\n      style: {\n        padding: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"#393939\",\n        fontWeight: 500,\n        fontSize: \"20px\",\n        marginLeft: \"50\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, \"Unsolved\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, unsolvedList)));\n  }\n\n}\n\nexport default Contest;","map":{"version":3,"sources":["C:/Users/Ayush/Desktop/Codeforces/codeforces-visulizer-master/src/Components/contest.js"],"names":["React","Contest","Component","render","best","worst","maxUp","maxDown","bestCon","worstCon","maxUpCon","maxDownCon","tot","props","user_data","length","con_url","forEach","con","rank","contestId","ch","newRating","oldRating","problems","i","data","sub","problemId","problem","index","undefined","attempts","solved","verdict","tried","maxAttempt","maxAttemptProblem","maxAc","maxAcProblem","unsolved","solvedWithOneSub","p","push","unsolvedList","map","split","display","padding","color","fontWeight","fontSize","marginLeft"],"mappings":"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","sourcesContent":["import React from \"react\";\nclass Contest extends React.Component{\n\n    render() {\n        //contest\n            var best = 1e10;\n            var worst = -1e10;\n            var maxUp = 0;\n            var maxDown = 0;\n            var bestCon = '';\n            var worstCon = '';\n            var maxUpCon = '';\n            var maxDownCon = '';\n            var tot = this.props.user_data.length;\n            var con_url = 'https://codeforces.com/contest/';\n            this.props.user_data.forEach(function(con) {\n            // con is a contest\n            if (con.rank < best) {\n              best = con.rank;\n              bestCon = con.contestId;\n            }\n            if (con.rank > worst) {\n              worst = con.rank;\n              worstCon = con.contestId;\n            }\n            var ch = con.newRating - con.oldRating;\n            if (ch > maxUp) {\n              maxUp = ch;\n              maxUpCon = con.contestId;\n            }\n            if (ch < maxDown) {\n              maxDown = ch;\n              maxDownCon = con.contestId;\n            }\n            });\n            // console.log(maxDownCon)\n            //problems\n            var problems = {};\n            for (var i = this.props.data.length - 1; i >= 0; i--) {\n                var sub = this.props.data[i];\n                var problemId = sub.problem.contestId + '-' + sub.problem.index;\n                if (problems[problemId] === undefined) {\n                    // first submission of a problem\n                    problems[problemId] = {\n                        attempts: 1,\n                        solved: 0 // We also want to save how many submission got AC, a better name would have been number_of_ac\n                    };\n                } else {\n                    //we want to show how many time a problem was attempted by a user before getting first AC\n                    if (problems[problemId].solved === 0) problems[problemId].attempts++;\n                }\n\n                if (sub.verdict === 'OK') {\n                    problems[problemId].solved++;\n                }\n            }\n                var tried = 0;\n                var solved = 0;\n                var maxAttempt = 0;\n                var maxAttemptProblem = '';\n                var maxAc = '';\n                var maxAcProblem = '';\n                var unsolved = [];\n                var solvedWithOneSub = 0;\n                for (var p in problems) {\n                    tried++;\n                    if (problems[p].solved > 0) solved++;\n                    if (problems[p].solved === 0) unsolved.push(p);\n\n                    if (problems[p].attempts > maxAttempt) {\n                        maxAttempt = problems[p].attempts;\n                        maxAttemptProblem = p;\n                    }\n                    if (problems[p].solved > maxAc) {\n                        maxAc = problems[p].solved;\n                        maxAcProblem = p;\n                    }\n                    if (problems[p].solved === problems[p].attempts) solvedWithOneSub++;\n                }\n                const unsolvedList =unsolved.map(p=>{\n                    if(p!==undefined) {\n                        return (\n                            <div className=\"col s3 m2 l2\"><a href={con_url+p.split('-')[0]+'/problem/'+p.split('-')[1]} target=\"_blank\" style={{display:\"inline-block\"}}>\n                                {p}\n                            </a>\n                            </div>\n                        )\n                    }\n                })\n        return(\n            <div >\n                {unsolved.length>0&&\n                <div className=\"row z-depth-2\" style={{padding:20}}>\n                    <span style={{ color: \"#393939\",fontWeight: 500,fontSize: \"20px\",marginLeft:\"50\"}}>Unsolved</span>\n                    {/*<div style={{width:\"100%\",height:\"20px\"}}></div>*/}\n                    <div >{unsolvedList}</div>\n                </div>\n                }\n                {/*this.props.data.length>0&&\n                <div className=\"row\">\n                    <div className=\"col collection s12 m6 l6 z-depth-2\" style={{borderRadius:\"10px\"}}>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Contest of</th>\n                                    <th className=\"right\">{this.props.user}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Number of contests</td>\n                                    <td className=\"right\">{tot}</td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Best rank</td>\n                                    <td className=\"right\">{best}<a href={con_url+bestCon} target=\"_blank\">({bestCon})</a></td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Worst Rank</td>\n                                    <td className=\"right\">{worst}<a href={con_url+worstCon} target=\"_blank\">({worstCon})</a></td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Max Up</td>\n                                    <td className=\"right\">{maxUp}<a href={con_url+maxUpCon} target=\"_blank\">({maxUpCon})</a></td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Max Down</td>\n                                    <td className=\"right\">{maxDown}<a href={con_url+maxDownCon} target=\"_blank\">({maxDownCon})</a></td>\n                                </tr>\n                                <tr>\n                                <td style={{color:\"#282c34\"}}>kajsdhka</td>\n                                    <td></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div className=\"col collection s12 m6 l6 z-depth-2\" style={{borderRadius:\"10px\"}}>\n                        <table >\n                            <thead>\n                                <tr>\n                                    <th>Some numbers about</th>\n                                    <th className=\"right\">{this.props.user}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Tried</td>\n                                    <td className=\"right\">{tried}</td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Solved</td>\n                                    <td className=\"right\">{solved}</td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Average attempts</td>\n                                    <td className=\"right\">{(this.props.data.length / solved).toFixed(2)}</td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Max attempts</td>\n                                    <td className=\"right\">{maxAttempt}<a href={con_url+maxAttemptProblem.split('-')[0]+'/problem/'+maxAttemptProblem.split('-')[1]} target=\"_blank\">({maxAttemptProblem})</a></td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Solved with one submission</td>\n                                    <td className=\"right\">{solvedWithOneSub} ({solved ? ((solvedWithOneSub / solved) * 100).toFixed(2) : 0})</td>\n                                </tr>\n                                <tr className=\"hoverable\" style={{borderRadius:\"10px\"}}>\n                                    <td>Max AC(s)</td>\n                                    <td className=\"right\">{maxAc}<a href={con_url+maxAcProblem.split('-')[0]+'/problem/'+maxAcProblem.split('-')[1]} target=\"_blank\">({maxAcProblem})</a></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n                */}\n\n            </div>\n        )\n    }\n\n}\nexport default Contest"]},"metadata":{},"sourceType":"module"}